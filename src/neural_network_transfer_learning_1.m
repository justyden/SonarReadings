%% An application that trains a neural network to detect objects using side scan sonar.
allImages = imageDatastore('TrainingData', 'IncludeSubfolders', true,...
'LabelSource', 'foldernames');
%% Split data into training and test sets (80% of images will be set as training; 20% for testing)
[trainingImages, testImages] = splitEachLabel(allImages, 0.8, 'randomize');
alex = alexnet;
layers = alex.Layers;
layers(23) = fullyConnectedLayer(3); % change this based on # of classes
layers(25) = classificationLayer;
trainingImages.ReadFcn = @readFunctionTrain; % resize
testImages.ReadFcn = @readFunctionTrain; % resize
inputSize = [227, 227, 3];
trainingImagesAugmented = augmentedImageDatastore(inputSize, trainingImages,'ColorPreprocessing','gray2rgb');
testImagesAugmented = augmentedImageDatastore(inputSize, testImages,'ColorPreprocessing','gray2rgb');
options = trainingOptions('sgdm', ...
'MiniBatchSize',16, ...
'MaxEpochs',15, ...
'InitialLearnRate',1e-4, ...
'Shuffle','every-epoch', ...
'ValidationData', testImagesAugmented, ...
'ValidationFrequency',3, ...
'Verbose',false, ...
'Plots','training-progress', ExecutionEnvironment="multi-gpu");
side_scan_network_1 = trainNetwork(trainingImagesAugmented, layers, options); % train network (takes time)
%% Test Network Performance (find accuracy with test images)
predictedLabels = classify(side_scan_network_1, testImagesAugmented); % run network with test images
accuracy = mean(predictedLabels == testImages.Labels) % find avg # correct
confusionchart(predictedLabels, testImages.Labels) % generate confusion matrix
save('side_scan_network_1.mat', 'side_scan_network_1')